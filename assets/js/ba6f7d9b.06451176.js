"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[673],{9953:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=n(5893),o=n(1151);const r={sidebar_position:1},d="Set the baud rate to 115200 before uboot",a={id:"Milkv-duo/Set-the-baud-rate-to-115200-before-uboot",title:"Set the baud rate to 115200 before uboot",description:"\u5728 Duo \u7684\u542f\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u5728 atf \u548c opensbi \u9636\u6bb5\uff08\u5305\u62ec\u5c0f\u6838\u91cc\u8fd0\u884c\u7684 FreeRTOS\uff09\u6ce2\u7279\u7387\u90fd\u4e3a 128000\uff0c\u800c\u5728 uboot \u542f\u52a8\u4e4b\u540e\u5305\u62ec\u5728 linux \u4e2d\uff0c\u6ce2\u7279\u7387\u53c8\u53d8\u6210\u4e86 115200\u3002\u67e5\u770b\u4e86\u6587\u6863\u53ca\u4ee3\u7801\uff0c\u53d1\u73b0\u539f\u56e0\u51fa\u73b0\u5728\u6ce2\u7279\u7387\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u3002\u8ba1\u7b97\u5f97\u5230\u7684\u6ce2\u7279\u7387\u5206\u9891\u7cfb\u6570\u4e3a 13.56\uff0c\u8fd9\u4e2a\u6570\u5b57\u5e94\u8be5\u8981\u56db\u820d\u4e94\u5165\uff0c\u4f46\u5728 uboot \u4e4b\u524d\u7684 uart \u9a71\u52a8\u4e2d\uff0c\u53ea\u662f\u628a\u5b83\u7684\u5c0f\u6570\u820d\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ce2\u7279\u7387\u88ab\u8bbe\u7f6e\u6210\u4e86 128000\u3002",source:"@site/docs/Milkv-duo/Set-the-baud-rate-to-115200-before-uboot.md",sourceDirName:"Milkv-duo",slug:"/Milkv-duo/Set-the-baud-rate-to-115200-before-uboot",permalink:"/docs/Milkv-duo/Set-the-baud-rate-to-115200-before-uboot",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u4ecb\u7ecd",permalink:"/docs/intro"},next:{title:"Milkv-duo \u8fd0\u884c Arch Linux \u7cfb\u7edf",permalink:"/docs/Milkv-duo/Arch-Linux-On-Milkv-duo"}},s={},u=[];function l(t){const e={code:"code",h1:"h1",img:"img",p:"p",pre:"pre",...(0,o.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"set-the-baud-rate-to-115200-before-uboot",children:"Set the baud rate to 115200 before uboot"}),"\n",(0,i.jsxs)(e.p,{children:["\u5728 Duo \u7684\u542f\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u5728 atf \u548c opensbi \u9636\u6bb5\uff08\u5305\u62ec\u5c0f\u6838\u91cc\u8fd0\u884c\u7684 FreeRTOS\uff09\u6ce2\u7279\u7387\u90fd\u4e3a 128000\uff0c\u800c\u5728 uboot \u542f\u52a8\u4e4b\u540e\u5305\u62ec\u5728 linux \u4e2d\uff0c\u6ce2\u7279\u7387\u53c8\u53d8\u6210\u4e86 115200\u3002\u67e5\u770b\u4e86\u6587\u6863\u53ca\u4ee3\u7801\uff0c\u53d1\u73b0\u539f\u56e0\u51fa\u73b0\u5728\u6ce2\u7279\u7387\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u3002\u8ba1\u7b97\u5f97\u5230\u7684\u6ce2\u7279\u7387\u5206\u9891\u7cfb\u6570\u4e3a ",(0,i.jsx)(e.code,{children:"13.56"}),"\uff0c\u8fd9\u4e2a\u6570\u5b57\u5e94\u8be5\u8981\u56db\u820d\u4e94\u5165\uff0c\u4f46\u5728 uboot \u4e4b\u524d\u7684 uart \u9a71\u52a8\u4e2d\uff0c\u53ea\u662f\u628a\u5b83\u7684\u5c0f\u6570\u820d\u53bb\u4e86\uff0c\u5bfc\u81f4\u6ce2\u7279\u7387\u88ab\u8bbe\u7f6e\u6210\u4e86 128000\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["During the startup of Duo, the baud rate is 128000 in both the atf and opensbi (including FreeRTOS running in the second core), and after the uboot startup, including linux, the baud rate turns to 115200. After reading the doc and code I found that It was a miscalculation of the baud rate. The calculated baud rate frequency division factor is ",(0,i.jsx)(e.code,{children:"13.56"}),", this number should be rounded, but in the uart driver before uboot, it is only rounded off the decimal, resulting in the baud rate is set to 128000."]}),"\n",(0,i.jsxs)(e.p,{children:["\u8981\u66f4\u6539 uboot \u4e4b\u524d\u7684\u6ce2\u7279\u7387\uff0c\u9700\u8981\u5728 bl2 \u548c opensbi \u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5728 bl2 \u4e2d\u6211\u4eec\u5728 ",(0,i.jsx)(e.code,{children:"bl2_main()"}),"\u51fd\u6570\u7684\u6700\u5f00\u59cb\u5904\u8fdb\u884c\u8bbe\u7f6e\uff1a"]}),"\n",(0,i.jsxs)(e.p,{children:["To change the baud rate before uboot, it needs to be set in bl2 and opensbi. In bl2 we set this at the beginning of the ",(0,i.jsx)(e.code,{children:"bl2_main()"})," function:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:"// duo-buildroot-sdk/fsbl/plat/cv180x/bl2/bl2_main.c\n\n#if !FSBL_SECURE_BOOT_SUPPORT\nint dec_verify_image(const void *image, size_t size, size_t dec_skip, struct fip_param1 *fip_param1)\n{\n\treturn 0;\n}\n#endif\n\n// Start of addition\n#define UART_DLL 0x04140000\n#define UART_DLH 0x04140004\n#define UART_LCR 0x0414000C\n\nvoid set_baudrate()\n{\n\t// 14 for 115200, 13 for 128000\n\tint baud_divisor = 14;\n\n\t// set DLAB to 1 to set dll and dlh\n\t*(volatile uint32_t*)(UART_LCR) |= (uint32_t)0x80;\n\n\t// set divisor\n\t*(volatile uint32_t*)(UART_DLL) = (uint32_t)(baud_divisor & 0xff);\n\t*(volatile uint32_t*)(UART_DLH) = (uint32_t)((baud_divisor >> 8) & 0xff);\n\n\t// set DLAB back to 0\n\t*(volatile uint32_t*)(UART_LCR) &= (uint32_t)(~0x80);\n}\n// End of addition\n\nvoid bl2_main(void)\n{\n\t// Start of addition\n\tset_baudrate();\n\t// End of addition\n\n\tATF_STATE = ATF_STATE_BL2_MAIN;\n\ttime_records->fsbl_start = read_time\n\n// ...\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u6211\u67e5\u770b\u4e86 opensbi \u7684\u4e3b\u7ebf\u4ee3\u7801\uff0c\u53d1\u73b0\u4e3b\u7ebf\u4e2d\u8fd9\u4e2a bug \u5df2\u7ecf\u88ab\u4fee\u590d\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ddf\u7740\u4e3b\u7ebf\u8fdb\u884c\u66f4\u6539\uff1a"}),"\n",(0,i.jsx)(e.p,{children:"Reading the mainline code of opensbi and I found that the bug in the mainline has been fixed, we only just to follow the mainline to make changes:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",children:"// duo-buildroot-sdk/opensbi/lib/utils/serial/uart8250.c\n\nint uart8250_init(unsigned long base, u32 in_freq, u32 baudrate, u32 reg_shift,\n\t\t  u32 reg_width)\n{\n\tu16 bdiv;\n\n\tuart8250_base      = (volatile void *)base;\n\tuart8250_reg_shift = reg_shift;\n\tuart8250_reg_width = reg_width;\n\tuart8250_in_freq   = in_freq;\n\tuart8250_baudrate  = baudrate;\n\n\t// Start of modification\n\tbdiv = (uart8250_in_freq + 8 * uart8250_baudrate) /\n\t\t(16 * uart8250_baudrate);\n\t// End of modification\n\n\t/* Disable all interrupts */\n\tset_reg(UART_IER_OFFSET, 0x00);\n\t/* Enable DLAB */\n\tset_reg(UART_LCR_OFFSET, 0x80);\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u7136\u540e\u91cd\u65b0\u7f16\u8bd1 fsbl\uff1a"}),"\n",(0,i.jsx)(e.p,{children:"Then recompile fsbl:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"cd /path/to/duo-buildroot-sdk\n\nexport MILKV_BOARD=milkv-duo\nsource milkv/boardconfig-milkv-duo.sh\nsource build/milkvsetup.sh\ndefconfig cv1800b_milkv_duo_sd\n\nbuild_fsbl\n\nls fsbl/build/cv1800b_milkv_duo_sd/fip.bin\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u5c06 ",(0,i.jsx)(e.code,{children:"fip.bin"})," \u62f7\u8d1d\u5230 tf \u5361\u7684\u7b2c\u4e00\u4e2a\u5206\u533a\uff0c\u4e0a\u7535\uff0c\u5c31\u53ef\u4ee5\u7528 115200 \u6ce2\u7279\u7387\u89c2\u5bdf\u8f93\u51fa\u4e86\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["Copy ",(0,i.jsx)(e.code,{children:"fip.bin"})," to the first partition of the tf card, power on. And we can use 115200 baud rate to observe the output."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:n(8865).Z+"",width:"406",height:"500"})})]})}function c(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(l,{...t})}):l(t)}},8865:(t,e,n)=>{n.d(e,{Z:()=>i});const i=n.p+"assets/images/baudrate_output-d655613f48bb9ae919147cbd87c868e3.png"},1151:(t,e,n)=>{n.d(e,{Z:()=>a,a:()=>d});var i=n(7294);const o={},r=i.createContext(o);function d(t){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:d(t.components),i.createElement(r.Provider,{value:e},t.children)}}}]);